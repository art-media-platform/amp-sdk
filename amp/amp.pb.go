// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp/amp.proto

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.
//
// Welcome to art.media.platform (c) 2023 ("amp"): a runtime model and specification to securely share and experience digital media under their own agreed terms and permissions,
//   something we can all agree on.

package amp

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Const int32

const (
	Const_Defs Const = 0
	// DefaultServicePort  is the default TCP port used to expose amp.Host service.
	Const_DefaultServicePort Const = 5192
	// Byte size and version of a TxMsg encoding -- sizes are little endian
	// A TxHeader has the following layout:
	//   Bytes  00:03 -- TxHeader marker ('amp')
	//          03:04 -- Const_TxHeader_Version
	//          04:08 -- TxMsg body size: header + serialized TxOp(s)
	//          08:12 -- TxMsg.DataStore size
	//          12:16 -- Reserved
	Const_TxHeader_Size Const = 16
	// Version of the TxHeader -- first byte
	Const_TxHeader_Version Const = 51
	// The first byte of the TxHeader is the header size and version and
	// the following 3 bytes of a serialized TxMsg ("amp")
	Const_TxHeader_Marker Const = 6385008
	// בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
	// Oh Lord, please bless this project, those who fight for it, and those who lay their life on Your altar.
	Const_Invocation Const = 3773
)

var Const_name = map[int32]string{
	0:       "Const_Defs",
	5192:    "Const_DefaultServicePort",
	16:      "Const_TxHeader_Size",
	51:      "Const_TxHeader_Version",
	6385008: "Const_TxHeader_Marker",
	3773:    "Const_Invocation",
}

var Const_value = map[string]int32{
	"Const_Defs":               0,
	"Const_DefaultServicePort": 5192,
	"Const_TxHeader_Size":      16,
	"Const_TxHeader_Version":   51,
	"Const_TxHeader_Marker":    6385008,
	"Const_Invocation":         3773,
}

func (Const) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{0}
}

// TxOpCode specifies a particular cell transaction operation.
type TxOpCode int32

const (
	TxOpCode_Nil           TxOpCode = 0
	TxOpCode_UpsertElement TxOpCode = 2
	TxOpCode_DeleteElement TxOpCode = 4
)

var TxOpCode_name = map[int32]string{
	0: "TxOpCode_Nil",
	2: "TxOpCode_UpsertElement",
	4: "TxOpCode_DeleteElement",
}

var TxOpCode_value = map[string]int32{
	"TxOpCode_Nil":           0,
	"TxOpCode_UpsertElement": 2,
	"TxOpCode_DeleteElement": 4,
}

func (TxOpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{1}
}

// TxBody contains a max number of uint64 fields usable for any purpose.
type TxField int32

const (
	TxField_Nil       TxField = 0
	TxField_CellID_0  TxField = 1
	TxField_CellID_1  TxField = 2
	TxField_CellID_2  TxField = 3
	TxField_AttrID_0  TxField = 4
	TxField_AttrID_1  TxField = 5
	TxField_AttrID_2  TxField = 6
	TxField_ItemID_0  TxField = 7
	TxField_ItemID_1  TxField = 8
	TxField_ItemID_2  TxField = 9
	TxField_EditID_0  TxField = 10
	TxField_EditID_1  TxField = 11
	TxField_EditID_2  TxField = 12
	TxField_NumFields TxField = 13
	TxField_MaxFields TxField = 24
)

var TxField_name = map[int32]string{
	0:  "TxField_Nil",
	1:  "TxField_CellID_0",
	2:  "TxField_CellID_1",
	3:  "TxField_CellID_2",
	4:  "TxField_AttrID_0",
	5:  "TxField_AttrID_1",
	6:  "TxField_AttrID_2",
	7:  "TxField_ItemID_0",
	8:  "TxField_ItemID_1",
	9:  "TxField_ItemID_2",
	10: "TxField_EditID_0",
	11: "TxField_EditID_1",
	12: "TxField_EditID_2",
	13: "TxField_NumFields",
	24: "TxField_MaxFields",
}

var TxField_value = map[string]int32{
	"TxField_Nil":       0,
	"TxField_CellID_0":  1,
	"TxField_CellID_1":  2,
	"TxField_CellID_2":  3,
	"TxField_AttrID_0":  4,
	"TxField_AttrID_1":  5,
	"TxField_AttrID_2":  6,
	"TxField_ItemID_0":  7,
	"TxField_ItemID_1":  8,
	"TxField_ItemID_2":  9,
	"TxField_EditID_0":  10,
	"TxField_EditID_1":  11,
	"TxField_EditID_2":  12,
	"TxField_NumFields": 13,
	"TxField_MaxFields": 24,
}

func (TxField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{2}
}

type SelectOp int32

const (
	SelectOp_Neutral SelectOp = 0
	SelectOp_Include SelectOp = 1
	SelectOp_Exclude SelectOp = 2
)

var SelectOp_name = map[int32]string{
	0: "SelectOp_Neutral",
	1: "SelectOp_Include",
	2: "SelectOp_Exclude",
}

var SelectOp_value = map[string]int32{
	"SelectOp_Neutral": 0,
	"SelectOp_Include": 1,
	"SelectOp_Exclude": 2,
}

func (SelectOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{3}
}

// OpStatus allows a sender to express the status of a request.
type OpStatus int32

const (
	// op or request has not yet initiated
	OpStatus_NotStarted OpStatus = 0
	// op or request is in progress
	OpStatus_Syncing OpStatus = 1
	// updating, processing, or suspended -- signifies opaque working state
	OpStatus_Busy OpStatus = 2
	// Sent by the host to signal that the op up to date and the client state is stable / synchronized.
	// This typically drives UI updates or other dependencies requiring a stable state.
	OpStatus_Synced OpStatus = 3
	// From the client to host, this signals to close / cancel the op associated with ReqID.
	// From the host to client, this signals that the given request ID has been closed / discarded.
	OpStatus_Closed OpStatus = 7
)

var OpStatus_name = map[int32]string{
	0: "OpStatus_NotStarted",
	1: "OpStatus_Syncing",
	2: "OpStatus_Busy",
	3: "OpStatus_Synced",
	7: "OpStatus_Closed",
}

var OpStatus_value = map[string]int32{
	"OpStatus_NotStarted": 0,
	"OpStatus_Syncing":    1,
	"OpStatus_Busy":       2,
	"OpStatus_Synced":     3,
	"OpStatus_Closed":     7,
}

func (OpStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{4}
}

type StateSync int32

const (
	// If set, a pin request will not send any state responses to the client.
	// This is useful when only writing to a cell and no state updates are needed.
	StateSync_None StateSync = 0
	// If set, a pin request will be automatically closed once state is pushed / synchronized.
	// This is useful when only a snapshot of the cell is needed.
	StateSync_CloseOnSync StateSync = 1
	// If set, a pin request will remain open even after state is synced.
	// In this mode, he client will receive any state updates until the request is explicitly closed.
	StateSync_Maintain StateSync = 2
)

var StateSync_name = map[int32]string{
	0: "StateSync_None",
	1: "StateSync_CloseOnSync",
	2: "StateSync_Maintain",
}

var StateSync_value = map[string]int32{
	"StateSync_None":        0,
	"StateSync_CloseOnSync": 1,
	"StateSync_Maintain":    2,
}

func (StateSync) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{5}
}

type Enable int32

const (
	Enable_LatentOff Enable = 0
	Enable_LatentOn  Enable = 1
	Enable_ActiveOn  Enable = 2
	Enable_ActiveOff Enable = 3
)

var Enable_name = map[int32]string{
	0: "Enable_LatentOff",
	1: "Enable_LatentOn",
	2: "Enable_ActiveOn",
	3: "Enable_ActiveOff",
}

var Enable_value = map[string]int32{
	"Enable_LatentOff": 0,
	"Enable_LatentOn":  1,
	"Enable_ActiveOn":  2,
	"Enable_ActiveOff": 3,
}

func (Enable) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{6}
}

type UrlScheme int32

const (
	UrlScheme_Nil          UrlScheme = 0
	UrlScheme_Unrecognized UrlScheme = 1
	UrlScheme_Http         UrlScheme = 2
	UrlScheme_Data         UrlScheme = 3
	UrlScheme_File         UrlScheme = 4
	UrlScheme_Amp          UrlScheme = 7
	UrlScheme_Git          UrlScheme = 16
)

var UrlScheme_name = map[int32]string{
	0:  "UrlScheme_Nil",
	1:  "UrlScheme_Unrecognized",
	2:  "UrlScheme_Http",
	3:  "UrlScheme_Data",
	4:  "UrlScheme_File",
	7:  "UrlScheme_Amp",
	16: "UrlScheme_Git",
}

var UrlScheme_value = map[string]int32{
	"UrlScheme_Nil":          0,
	"UrlScheme_Unrecognized": 1,
	"UrlScheme_Http":         2,
	"UrlScheme_Data":         3,
	"UrlScheme_File":         4,
	"UrlScheme_Amp":          7,
	"UrlScheme_Git":          16,
}

func (UrlScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{7}
}

type Metric int32

const (
	Metric_Nil                           Metric = 0
	Metric_OrthoPixel                    Metric = 1
	Metric_OrthoMeter                    Metric = 2
	Metric_OrthoMillimeter               Metric = 3
	Metric_OrthoPlank                    Metric = 4
	Metric_HexGridMillimeter             Metric = 5
	Metric_TrapezoDodecahedronMillimeter Metric = 6
)

var Metric_name = map[int32]string{
	0: "Metric_Nil",
	1: "Metric_OrthoPixel",
	2: "Metric_OrthoMeter",
	3: "Metric_OrthoMillimeter",
	4: "Metric_OrthoPlank",
	5: "Metric_HexGridMillimeter",
	6: "Metric_TrapezoDodecahedronMillimeter",
}

var Metric_value = map[string]int32{
	"Metric_Nil":                           0,
	"Metric_OrthoPixel":                    1,
	"Metric_OrthoMeter":                    2,
	"Metric_OrthoMillimeter":               3,
	"Metric_OrthoPlank":                    4,
	"Metric_HexGridMillimeter":             5,
	"Metric_TrapezoDodecahedronMillimeter": 6,
}

func (Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{8}
}

// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
type CryptoKitID int32

const (
	CryptoKit_Nil             CryptoKitID = 0
	CryptoKit_SecretBox_NaCl  CryptoKitID = 100
	CryptoKit_AsymMsg_NaCl    CryptoKitID = 101
	CryptoKit_Signing_NaCl    CryptoKitID = 102
	CryptoKit_Signing_ED25519 CryptoKitID = 202
)

var CryptoKitID_name = map[int32]string{
	0:   "CryptoKit_Nil",
	100: "CryptoKit_SecretBox_NaCl",
	101: "CryptoKit_AsymMsg_NaCl",
	102: "CryptoKit_Signing_NaCl",
	202: "CryptoKit_Signing_ED25519",
}

var CryptoKitID_value = map[string]int32{
	"CryptoKit_Nil":             0,
	"CryptoKit_SecretBox_NaCl":  100,
	"CryptoKit_AsymMsg_NaCl":    101,
	"CryptoKit_Signing_NaCl":    102,
	"CryptoKit_Signing_ED25519": 202,
}

func (CryptoKitID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{9}
}

// ErrCode expresses status and error codes.
type ErrCode int32

const (
	ErrCode_NoErr                   ErrCode = 0
	ErrCode_UnnamedErr              ErrCode = 5000
	ErrCode_InternalErr             ErrCode = 5001
	ErrCode_UnsupportedOp           ErrCode = 5002
	ErrCode_Unimplemented           ErrCode = 5003
	ErrCode_Timeout                 ErrCode = 5004
	ErrCode_ShuttingDown            ErrCode = 5005
	ErrCode_NotConnected            ErrCode = 5006
	ErrCode_AuthFailed              ErrCode = 5007
	ErrCode_LoginFailed             ErrCode = 5008
	ErrCode_SessionExpired          ErrCode = 5009
	ErrCode_NotReady                ErrCode = 5010
	ErrCode_RequestNotFound         ErrCode = 5020
	ErrCode_RequestClosed           ErrCode = 5021
	ErrCode_BadRequest              ErrCode = 5022
	ErrCode_InvalidURI              ErrCode = 5023
	ErrCode_BadValue                ErrCode = 5024
	ErrCode_InvalidTag              ErrCode = 5025
	ErrCode_AttrNotFound            ErrCode = 5029
	ErrCode_NothingToCommit         ErrCode = 5030
	ErrCode_CommitFailed            ErrCode = 5031
	ErrCode_SpaceNotFound           ErrCode = 5032
	ErrCode_StorageFailure          ErrCode = 5033
	ErrCode_AppNotFound             ErrCode = 5034
	ErrCode_MalformedTx             ErrCode = 5040
	ErrCode_BadSchema               ErrCode = 5052
	ErrCode_DataFailure             ErrCode = 5053
	ErrCode_ExportErr               ErrCode = 5054
	ErrCode_PinFailed               ErrCode = 5055
	ErrCode_CellNotFound            ErrCode = 5058
	ErrCode_ProviderErr             ErrCode = 5059
	ErrCode_ViolatesAppendOnly      ErrCode = 5100
	ErrCode_InsufficientPermissions ErrCode = 5101
)

var ErrCode_name = map[int32]string{
	0:    "ErrCode_NoErr",
	5000: "ErrCode_UnnamedErr",
	5001: "ErrCode_InternalErr",
	5002: "ErrCode_UnsupportedOp",
	5003: "ErrCode_Unimplemented",
	5004: "ErrCode_Timeout",
	5005: "ErrCode_ShuttingDown",
	5006: "ErrCode_NotConnected",
	5007: "ErrCode_AuthFailed",
	5008: "ErrCode_LoginFailed",
	5009: "ErrCode_SessionExpired",
	5010: "ErrCode_NotReady",
	5020: "ErrCode_RequestNotFound",
	5021: "ErrCode_RequestClosed",
	5022: "ErrCode_BadRequest",
	5023: "ErrCode_InvalidURI",
	5024: "ErrCode_BadValue",
	5025: "ErrCode_InvalidTag",
	5029: "ErrCode_AttrNotFound",
	5030: "ErrCode_NothingToCommit",
	5031: "ErrCode_CommitFailed",
	5032: "ErrCode_SpaceNotFound",
	5033: "ErrCode_StorageFailure",
	5034: "ErrCode_AppNotFound",
	5040: "ErrCode_MalformedTx",
	5052: "ErrCode_BadSchema",
	5053: "ErrCode_DataFailure",
	5054: "ErrCode_ExportErr",
	5055: "ErrCode_PinFailed",
	5058: "ErrCode_CellNotFound",
	5059: "ErrCode_ProviderErr",
	5100: "ErrCode_ViolatesAppendOnly",
	5101: "ErrCode_InsufficientPermissions",
}

var ErrCode_value = map[string]int32{
	"ErrCode_NoErr":                   0,
	"ErrCode_UnnamedErr":              5000,
	"ErrCode_InternalErr":             5001,
	"ErrCode_UnsupportedOp":           5002,
	"ErrCode_Unimplemented":           5003,
	"ErrCode_Timeout":                 5004,
	"ErrCode_ShuttingDown":            5005,
	"ErrCode_NotConnected":            5006,
	"ErrCode_AuthFailed":              5007,
	"ErrCode_LoginFailed":             5008,
	"ErrCode_SessionExpired":          5009,
	"ErrCode_NotReady":                5010,
	"ErrCode_RequestNotFound":         5020,
	"ErrCode_RequestClosed":           5021,
	"ErrCode_BadRequest":              5022,
	"ErrCode_InvalidURI":              5023,
	"ErrCode_BadValue":                5024,
	"ErrCode_InvalidTag":              5025,
	"ErrCode_AttrNotFound":            5029,
	"ErrCode_NothingToCommit":         5030,
	"ErrCode_CommitFailed":            5031,
	"ErrCode_SpaceNotFound":           5032,
	"ErrCode_StorageFailure":          5033,
	"ErrCode_AppNotFound":             5034,
	"ErrCode_MalformedTx":             5040,
	"ErrCode_BadSchema":               5052,
	"ErrCode_DataFailure":             5053,
	"ErrCode_ExportErr":               5054,
	"ErrCode_PinFailed":               5055,
	"ErrCode_CellNotFound":            5058,
	"ErrCode_ProviderErr":             5059,
	"ErrCode_ViolatesAppendOnly":      5100,
	"ErrCode_InsufficientPermissions": 5101,
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{10}
}

type LogLevel int32

const (
	LogLevel_Error LogLevel = 0
	LogLevel_Warn  LogLevel = 2
	LogLevel_Info  LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "LogLevel_Error",
	2: "LogLevel_Warn",
	4: "LogLevel_Info",
}

var LogLevel_value = map[string]int32{
	"LogLevel_Error": 0,
	"LogLevel_Warn":  2,
	"LogLevel_Info":  4,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{11}
}

// TxEnvelope contains information for a TxMsg
type TxEnvelope struct {
	// communicates request status / completion.
	Status OpStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=amp.OpStatus" json:"Status,omitempty"`
	// The number of TxOps in this TxEnvelope
	OpCount uint64 `protobuf:"varint,4,opt,name=OpCount,proto3" json:"OpCount,omitempty"`
	// A universally unique tag assigned when this Tx was created.
	// Used to identify this tx and also serves as context ID for subsequent responses.
	GenesisID_0 int64  `protobuf:"varint,5,opt,name=GenesisID_0,json=GenesisID0,proto3" json:"GenesisID_0,omitempty"`
	GenesisID_1 uint64 `protobuf:"fixed64,6,opt,name=GenesisID_1,json=GenesisID1,proto3" json:"GenesisID_1,omitempty"`
	GenesisID_2 uint64 `protobuf:"fixed64,7,opt,name=GenesisID_2,json=GenesisID2,proto3" json:"GenesisID_2,omitempty"`
	// If set, this references a previously witnessed tx -- typically used for a response to a request.
	// If nil, this is a context-free tx and GenesisID becomes the implied context ID.
	ContextID_0 int64  `protobuf:"varint,10,opt,name=ContextID_0,json=ContextID0,proto3" json:"ContextID_0,omitempty"`
	ContextID_1 uint64 `protobuf:"fixed64,11,opt,name=ContextID_1,json=ContextID1,proto3" json:"ContextID_1,omitempty"`
	ContextID_2 uint64 `protobuf:"fixed64,12,opt,name=ContextID_2,json=ContextID2,proto3" json:"ContextID_2,omitempty"`
	// sender of this TxEnvelope
	From *Tag `protobuf:"bytes,14,opt,name=From,proto3" json:"From,omitempty"`
	// recipient of this TxEnvelope
	To *Tag `protobuf:"bytes,15,opt,name=To,proto3" json:"To,omitempty"`
	// authority / trust snapshot
	Epoch *Tag `protobuf:"bytes,16,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	// headers / metadata / context
	Tags *Tags `protobuf:"bytes,17,opt,name=Tags,proto3" json:"Tags,omitempty"`
}

func (m *TxEnvelope) Reset()      { *m = TxEnvelope{} }
func (*TxEnvelope) ProtoMessage() {}
func (*TxEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{0}
}
func (m *TxEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxEnvelope.Merge(m, src)
}
func (m *TxEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *TxEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_TxEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_TxEnvelope proto.InternalMessageInfo

func (m *TxEnvelope) GetStatus() OpStatus {
	if m != nil {
		return m.Status
	}
	return OpStatus_NotStarted
}

func (m *TxEnvelope) GetOpCount() uint64 {
	if m != nil {
		return m.OpCount
	}
	return 0
}

func (m *TxEnvelope) GetGenesisID_0() int64 {
	if m != nil {
		return m.GenesisID_0
	}
	return 0
}

func (m *TxEnvelope) GetGenesisID_1() uint64 {
	if m != nil {
		return m.GenesisID_1
	}
	return 0
}

func (m *TxEnvelope) GetGenesisID_2() uint64 {
	if m != nil {
		return m.GenesisID_2
	}
	return 0
}

func (m *TxEnvelope) GetContextID_0() int64 {
	if m != nil {
		return m.ContextID_0
	}
	return 0
}

func (m *TxEnvelope) GetContextID_1() uint64 {
	if m != nil {
		return m.ContextID_1
	}
	return 0
}

func (m *TxEnvelope) GetContextID_2() uint64 {
	if m != nil {
		return m.ContextID_2
	}
	return 0
}

func (m *TxEnvelope) GetFrom() *Tag {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TxEnvelope) GetTo() *Tag {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TxEnvelope) GetEpoch() *Tag {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *TxEnvelope) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Login -- STEP 1: client -> host
type Login struct {
	UserID   *Tag `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DeviceID *Tag `protobuf:"bytes,5,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	// HostAddress is network address of the server known to the client (e.g. IP address, localhost, domain name, etc)
	// amp.Host uses this to as the host name when serving URLs for the client to consume.
	HostAddress string `protobuf:"bytes,8,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	// Tags is an unordered list of string literals tokens with predefined meanings, separated by spaces, periods, or commas.
	Tags string `protobuf:"bytes,9,opt,name=Tags,proto3" json:"Tags,omitempty"`
	// Checkpoint allows the client to resume an auth session.
	Checkpoint *LoginCheckpoint `protobuf:"bytes,12,opt,name=Checkpoint,proto3" json:"Checkpoint,omitempty"`
}

func (m *Login) Reset()      { *m = Login{} }
func (*Login) ProtoMessage() {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{1}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return m.Size()
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUserID() *Tag {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *Login) GetDeviceID() *Tag {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *Login) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *Login) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Login) GetCheckpoint() *LoginCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

// LoginChallenge -- STEP 2: host -> client
type LoginChallenge struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *LoginChallenge) Reset()      { *m = LoginChallenge{} }
func (*LoginChallenge) ProtoMessage() {}
func (*LoginChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{2}
}
func (m *LoginChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginChallenge.Merge(m, src)
}
func (m *LoginChallenge) XXX_Size() int {
	return m.Size()
}
func (m *LoginChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_LoginChallenge proto.InternalMessageInfo

func (m *LoginChallenge) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// LoginResponse -- STEP 3: client -> host
type LoginResponse struct {
	HashResponse []byte `protobuf:"bytes,1,opt,name=HashResponse,proto3" json:"HashResponse,omitempty"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{3}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetHashResponse() []byte {
	if m != nil {
		return m.HashResponse
	}
	return nil
}

// LoginCheckpoint wraps oauth2 -- see oauth2.Token
type LoginCheckpoint struct {
	TokenType    string `protobuf:"bytes,1,opt,name=TokenType,proto3" json:"TokenType,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=RefreshToken,proto3" json:"RefreshToken,omitempty"`
	Expiry       int64  `protobuf:"varint,4,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
	UserID       string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	URI          string `protobuf:"bytes,12,opt,name=URI,proto3" json:"URI,omitempty"`
}

func (m *LoginCheckpoint) Reset()      { *m = LoginCheckpoint{} }
func (*LoginCheckpoint) ProtoMessage() {}
func (*LoginCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{4}
}
func (m *LoginCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginCheckpoint.Merge(m, src)
}
func (m *LoginCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *LoginCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_LoginCheckpoint proto.InternalMessageInfo

func (m *LoginCheckpoint) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *LoginCheckpoint) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *LoginCheckpoint) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *LoginCheckpoint) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *LoginCheckpoint) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LoginCheckpoint) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

// PinRequest is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.
type PinRequest struct {
	// Specifies a target URL or tag / cell ID to be pinned with the above available mint templates available.
	PinTarget *Tag `protobuf:"bytes,2,opt,name=PinTarget,proto3" json:"PinTarget,omitempty"`
	// Attributes to be synchronized -- if nil, all attrs are pinned
	PinAttrs []*Tag `protobuf:"bytes,4,rep,name=PinAttrs,proto3" json:"PinAttrs,omitempty"`
	// Options for this request.
	StateSync StateSync `protobuf:"varint,6,opt,name=StateSync,proto3,enum=amp.StateSync" json:"StateSync,omitempty"`
	// future proofing
	Tags *Tag `protobuf:"bytes,17,opt,name=Tags,proto3" json:"Tags,omitempty"`
}

func (m *PinRequest) Reset()      { *m = PinRequest{} }
func (*PinRequest) ProtoMessage() {}
func (*PinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{5}
}
func (m *PinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PinRequest.Merge(m, src)
}
func (m *PinRequest) XXX_Size() int {
	return m.Size()
}
func (m *PinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PinRequest proto.InternalMessageInfo

func (m *PinRequest) GetPinTarget() *Tag {
	if m != nil {
		return m.PinTarget
	}
	return nil
}

func (m *PinRequest) GetPinAttrs() []*Tag {
	if m != nil {
		return m.PinAttrs
	}
	return nil
}

func (m *PinRequest) GetStateSync() StateSync {
	if m != nil {
		return m.StateSync
	}
	return StateSync_None
}

func (m *PinRequest) GetTags() *Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

// LaunchURL is used as a meta attribute handle a URL, such as an oauth request (host to client) or an oauth response (client to host).
type LaunchURL struct {
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *LaunchURL) Reset()      { *m = LaunchURL{} }
func (*LaunchURL) ProtoMessage() {}
func (*LaunchURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{6}
}
func (m *LaunchURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LaunchURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LaunchURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LaunchURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchURL.Merge(m, src)
}
func (m *LaunchURL) XXX_Size() int {
	return m.Size()
}
func (m *LaunchURL) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchURL.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchURL proto.InternalMessageInfo

func (m *LaunchURL) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// Tag is a multi-purpose, human-readable, intuitive, phonetically / hands-free, friendly cryptographically anonymous tagging and system actor "tag" or "badge" identifier.
// Typically, a "Tags" string is parsed and hashed for safe and high performance data access.
// SHA1 or any compatible 24 byte UTF8 literal hash DFA.
type Tag struct {
	ID_0        int64  `protobuf:"varint,2,opt,name=ID_0,json=ID0,proto3" json:"ID_0,omitempty"`
	ID_1        uint64 `protobuf:"fixed64,3,opt,name=ID_1,json=ID1,proto3" json:"ID_1,omitempty"`
	ID_2        uint64 `protobuf:"fixed64,4,opt,name=ID_2,json=ID2,proto3" json:"ID_2,omitempty"`
	ContentType string `protobuf:"bytes,10,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	UID         string `protobuf:"bytes,12,opt,name=UID,proto3" json:"UID,omitempty"`
	Text        string `protobuf:"bytes,13,opt,name=Text,proto3" json:"Text,omitempty"`
	URL         string `protobuf:"bytes,15,opt,name=URL,proto3" json:"URL,omitempty"`
	// Metric specifies the metric system used for the size metric values
	Metric Metric `protobuf:"varint,20,opt,name=Metric,proto3,enum=amp.Metric" json:"Metric,omitempty"`
	// SizeX, SizeY, SizeZ specify the size of the object in a given metric system
	SizeX int64 `protobuf:"varint,21,opt,name=SizeX,proto3" json:"SizeX,omitempty"`
	SizeY int64 `protobuf:"varint,22,opt,name=SizeY,proto3" json:"SizeY,omitempty"`
	SizeZ int64 `protobuf:"varint,23,opt,name=SizeZ,proto3" json:"SizeZ,omitempty"`
}

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{7}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetID_0() int64 {
	if m != nil {
		return m.ID_0
	}
	return 0
}

func (m *Tag) GetID_1() uint64 {
	if m != nil {
		return m.ID_1
	}
	return 0
}

func (m *Tag) GetID_2() uint64 {
	if m != nil {
		return m.ID_2
	}
	return 0
}

func (m *Tag) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Tag) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Tag) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tag) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Tag) GetMetric() Metric {
	if m != nil {
		return m.Metric
	}
	return Metric_Nil
}

func (m *Tag) GetSizeX() int64 {
	if m != nil {
		return m.SizeX
	}
	return 0
}

func (m *Tag) GetSizeY() int64 {
	if m != nil {
		return m.SizeY
	}
	return 0
}

func (m *Tag) GetSizeZ() int64 {
	if m != nil {
		return m.SizeZ
	}
	return 0
}

// Tags is a multi-purpose, automatically serializable and customable tree.
//
// All fields are optional and whose meaning is contextual.
type Tags struct {
	ID      *Tag    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SubTags []*Tags `protobuf:"bytes,8,rep,name=SubTags,proto3" json:"SubTags,omitempty"`
}

func (m *Tags) Reset()      { *m = Tags{} }
func (*Tags) ProtoMessage() {}
func (*Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{8}
}
func (m *Tags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tags.Merge(m, src)
}
func (m *Tags) XXX_Size() int {
	return m.Size()
}
func (m *Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Tags proto.InternalMessageInfo

func (m *Tags) GetID() *Tag {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Tags) GetSubTags() []*Tags {
	if m != nil {
		return m.SubTags
	}
	return nil
}

type CryptoKey struct {
	CryptoKitID CryptoKitID `protobuf:"varint,1,opt,name=CryptoKitID,proto3,enum=amp.CryptoKitID" json:"CryptoKitID,omitempty"`
	KeyBytes    []byte      `protobuf:"bytes,4,opt,name=KeyBytes,proto3" json:"KeyBytes,omitempty"`
}

func (m *CryptoKey) Reset()      { *m = CryptoKey{} }
func (*CryptoKey) ProtoMessage() {}
func (*CryptoKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{9}
}
func (m *CryptoKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CryptoKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CryptoKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CryptoKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoKey.Merge(m, src)
}
func (m *CryptoKey) XXX_Size() int {
	return m.Size()
}
func (m *CryptoKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoKey.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoKey proto.InternalMessageInfo

func (m *CryptoKey) GetCryptoKitID() CryptoKitID {
	if m != nil {
		return m.CryptoKitID
	}
	return CryptoKit_Nil
}

func (m *CryptoKey) GetKeyBytes() []byte {
	if m != nil {
		return m.KeyBytes
	}
	return nil
}

// Err is a general purpose error / warning / log message.
type Err struct {
	// Identifies the type of error.
	Code ErrCode `protobuf:"varint,1,opt,name=Code,proto3,enum=amp.ErrCode" json:"Code,omitempty"`
	// Severity level
	Level LogLevel `protobuf:"varint,2,opt,name=Level,proto3,enum=amp.LogLevel" json:"Level,omitempty"`
	// human-readable info
	Msg string `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *Err) Reset()      { *m = Err{} }
func (*Err) ProtoMessage() {}
func (*Err) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e479d288f92766f, []int{10}
}
func (m *Err) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Err) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Err.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Err) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Err.Merge(m, src)
}
func (m *Err) XXX_Size() int {
	return m.Size()
}
func (m *Err) XXX_DiscardUnknown() {
	xxx_messageInfo_Err.DiscardUnknown(m)
}

var xxx_messageInfo_Err proto.InternalMessageInfo

func (m *Err) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_NoErr
}

func (m *Err) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLevel_Error
}

func (m *Err) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("amp.Const", Const_name, Const_value)
	proto.RegisterEnum("amp.TxOpCode", TxOpCode_name, TxOpCode_value)
	proto.RegisterEnum("amp.TxField", TxField_name, TxField_value)
	proto.RegisterEnum("amp.SelectOp", SelectOp_name, SelectOp_value)
	proto.RegisterEnum("amp.OpStatus", OpStatus_name, OpStatus_value)
	proto.RegisterEnum("amp.StateSync", StateSync_name, StateSync_value)
	proto.RegisterEnum("amp.Enable", Enable_name, Enable_value)
	proto.RegisterEnum("amp.UrlScheme", UrlScheme_name, UrlScheme_value)
	proto.RegisterEnum("amp.Metric", Metric_name, Metric_value)
	proto.RegisterEnum("amp.CryptoKitID", CryptoKitID_name, CryptoKitID_value)
	proto.RegisterEnum("amp.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("amp.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*TxEnvelope)(nil), "amp.TxEnvelope")
	proto.RegisterType((*Login)(nil), "amp.Login")
	proto.RegisterType((*LoginChallenge)(nil), "amp.LoginChallenge")
	proto.RegisterType((*LoginResponse)(nil), "amp.LoginResponse")
	proto.RegisterType((*LoginCheckpoint)(nil), "amp.LoginCheckpoint")
	proto.RegisterType((*PinRequest)(nil), "amp.PinRequest")
	proto.RegisterType((*LaunchURL)(nil), "amp.LaunchURL")
	proto.RegisterType((*Tag)(nil), "amp.Tag")
	proto.RegisterType((*Tags)(nil), "amp.Tags")
	proto.RegisterType((*CryptoKey)(nil), "amp.CryptoKey")
	proto.RegisterType((*Err)(nil), "amp.Err")
}

func init() { proto.RegisterFile("amp/amp.proto", fileDescriptor_7e479d288f92766f) }

var fileDescriptor_7e479d288f92766f = []byte{
	// 1966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x98, 0x4f, 0x70, 0x1b, 0x49,
	0xf5, 0xc7, 0x3d, 0x92, 0x2c, 0x5b, 0xed, 0x7f, 0xed, 0x5e, 0xdb, 0x99, 0xe4, 0xe7, 0x28, 0x2e,
	0x25, 0x3f, 0xe4, 0x52, 0x6d, 0xfe, 0x48, 0x61, 0x0f, 0x1c, 0x6d, 0x49, 0x49, 0x54, 0xeb, 0x7f,
	0x35, 0x92, 0x03, 0x1b, 0xaa, 0x56, 0xd5, 0xd1, 0x3c, 0x49, 0x53, 0x19, 0x75, 0x0f, 0x3d, 0x2d,
	0x23, 0xe5, 0xc4, 0x85, 0x2a, 0x58, 0xfe, 0x2d, 0x1c, 0x38, 0x2d, 0xb0, 0x1c, 0x58, 0x96, 0x3d,
	0x71, 0xe3, 0x00, 0x0b, 0x05, 0x5c, 0xb6, 0x38, 0xe5, 0xb8, 0xc5, 0x89, 0x38, 0x17, 0x0e, 0x50,
	0x95, 0x0b, 0x67, 0xa8, 0xee, 0xf9, 0xa3, 0x19, 0xaf, 0x6f, 0xaf, 0x3f, 0xdf, 0xd7, 0xaf, 0x5f,
	0xbf, 0xee, 0x7e, 0x23, 0x1b, 0xad, 0xd0, 0x91, 0x77, 0x97, 0x8e, 0xbc, 0x3b, 0x9e, 0xe0, 0x92,
	0x93, 0x2c, 0x1d, 0x79, 0xa5, 0xf7, 0xb2, 0x08, 0x75, 0x26, 0x4d, 0x76, 0x06, 0x2e, 0xf7, 0x80,
	0xfc, 0x3f, 0xca, 0xb7, 0x25, 0x95, 0x63, 0xdf, 0xcc, 0xec, 0x18, 0xbb, 0xab, 0xb5, 0x95, 0x3b,
	0xca, 0xff, 0xd8, 0x0b, 0xa0, 0x15, 0x8a, 0xc4, 0x44, 0x0b, 0xc7, 0x5e, 0x9d, 0x8f, 0x99, 0x34,
	0x73, 0x3b, 0xc6, 0x6e, 0xce, 0x8a, 0x86, 0xe4, 0x06, 0x5a, 0x7a, 0x08, 0x0c, 0x7c, 0xc7, 0x6f,
	0x35, 0xba, 0xf7, 0xcc, 0xf9, 0x1d, 0x63, 0x37, 0x6b, 0xa1, 0x18, 0xdd, 0x4b, 0x3b, 0x54, 0xcd,
	0xfc, 0x8e, 0xb1, 0x9b, 0x4f, 0x38, 0x54, 0xd3, 0x0e, 0x35, 0x73, 0xe1, 0x82, 0x43, 0x4d, 0x39,
	0xd4, 0x39, 0x93, 0x30, 0x91, 0x7a, 0x09, 0x14, 0x2c, 0x11, 0xa3, 0x7b, 0x69, 0x87, 0xaa, 0xb9,
	0x14, 0x44, 0x88, 0x51, 0x35, 0xed, 0x50, 0x33, 0x97, 0x2f, 0x38, 0xd4, 0xc8, 0x36, 0xca, 0x3d,
	0x10, 0x7c, 0x64, 0xae, 0xee, 0x18, 0xbb, 0x4b, 0xb5, 0x45, 0x5d, 0x84, 0x0e, 0x1d, 0x58, 0x9a,
	0x12, 0x13, 0x65, 0x3a, 0xdc, 0x5c, 0xbb, 0xa0, 0x65, 0x3a, 0x9c, 0x14, 0xd1, 0x7c, 0xd3, 0xe3,
	0xbd, 0xa1, 0x89, 0x2f, 0x88, 0x01, 0x26, 0xd7, 0x51, 0xae, 0x43, 0x07, 0xbe, 0xb9, 0xae, 0xe5,
	0x42, 0x24, 0xfb, 0x96, 0xc6, 0xa5, 0xdf, 0x1b, 0x68, 0xfe, 0x80, 0x0f, 0x1c, 0x46, 0x76, 0x50,
	0xfe, 0xd4, 0x07, 0xd1, 0x6a, 0x98, 0xc6, 0x85, 0x48, 0x21, 0x27, 0xb7, 0xd0, 0x62, 0x03, 0xce,
	0x9c, 0x1e, 0xb4, 0x1a, 0xba, 0xca, 0x49, 0x9f, 0x58, 0x21, 0x3b, 0x68, 0xe9, 0x11, 0xf7, 0xe5,
	0x9e, 0x6d, 0x0b, 0xf0, 0x7d, 0x73, 0x71, 0xc7, 0xd8, 0x2d, 0x58, 0x49, 0x44, 0x48, 0x98, 0x52,
	0x41, 0x4b, 0xda, 0x26, 0x5f, 0x46, 0xa8, 0x3e, 0x84, 0xde, 0x33, 0x8f, 0x3b, 0x4c, 0xea, 0xf2,
	0x2c, 0xd5, 0x36, 0x74, 0x74, 0x9d, 0xdd, 0x4c, 0xb3, 0x12, 0x7e, 0xa5, 0x5b, 0x68, 0x35, 0x94,
	0xa9, 0xeb, 0x02, 0x1b, 0x80, 0x8a, 0xfd, 0x88, 0xfa, 0x43, 0xbd, 0x87, 0x65, 0x4b, 0xdb, 0xa5,
	0xfb, 0x68, 0x45, 0x7b, 0x59, 0xe0, 0x7b, 0x9c, 0xf9, 0x40, 0x4a, 0x68, 0x59, 0x09, 0xd1, 0x38,
	0x74, 0x4e, 0xb1, 0xd2, 0xef, 0x0c, 0xb4, 0x76, 0x61, 0x69, 0xb2, 0x8d, 0x0a, 0x1d, 0xfe, 0x0c,
	0x58, 0x67, 0xea, 0x05, 0x93, 0x0a, 0xd6, 0x0c, 0xa8, 0x8d, 0xef, 0xf5, 0x7a, 0xe0, 0xfb, 0x1a,
	0xe9, 0xdb, 0x5c, 0xb0, 0x92, 0x48, 0xad, 0x6b, 0x41, 0x5f, 0x80, 0x3f, 0x0c, 0x5c, 0xb2, 0xda,
	0x25, 0xc5, 0xc8, 0x16, 0xca, 0x37, 0x27, 0x9e, 0x23, 0xa6, 0xfa, 0x9a, 0x67, 0xad, 0x70, 0xa4,
	0x78, 0x78, 0x3c, 0x4b, 0x7a, 0x56, 0x74, 0x28, 0x18, 0x65, 0x4f, 0xad, 0x96, 0xae, 0x58, 0xc1,
	0x52, 0x66, 0xe9, 0x23, 0x03, 0xa1, 0x13, 0xb5, 0xdb, 0x6f, 0x8c, 0xc1, 0x97, 0xe4, 0x4b, 0xa8,
	0x70, 0xe2, 0xb0, 0x0e, 0x15, 0x03, 0x90, 0x3a, 0xa9, 0xe4, 0xb1, 0xcd, 0x24, 0x75, 0xba, 0x27,
	0x0e, 0xdb, 0x93, 0x52, 0xf8, 0x66, 0x6e, 0x27, 0x9b, 0x3e, 0xdd, 0x48, 0x21, 0x6f, 0xa2, 0x82,
	0x7a, 0x90, 0xd0, 0x9e, 0xb2, 0x9e, 0x7e, 0x49, 0xab, 0xb5, 0x55, 0xed, 0x16, 0x53, 0x6b, 0xe6,
	0xa0, 0x2e, 0x75, 0xe2, 0xf2, 0x25, 0x2e, 0xb5, 0xbe, 0x7b, 0xd7, 0x51, 0xe1, 0x80, 0x8e, 0x59,
	0x6f, 0x78, 0x6a, 0x1d, 0x04, 0xfb, 0x38, 0x08, 0xab, 0xaa, 0xcc, 0xd2, 0x7f, 0x0d, 0x94, 0xed,
	0xd0, 0x01, 0x59, 0x47, 0x39, 0xfd, 0xea, 0x32, 0xba, 0x1e, 0x59, 0xf5, 0xdc, 0x02, 0x54, 0xd5,
	0x05, 0xcc, 0x2b, 0x54, 0x0d, 0x51, 0x4d, 0x57, 0x4d, 0xa3, 0x9a, 0x3a, 0x10, 0xfd, 0xc0, 0x98,
	0xd4, 0x07, 0x86, 0x82, 0x03, 0x49, 0x20, 0xbd, 0x68, 0xab, 0x11, 0x17, 0xaf, 0xd5, 0xd0, 0x77,
	0x13, 0x26, 0xd2, 0x5c, 0x09, 0xef, 0x26, 0x4c, 0x64, 0x94, 0xda, 0x5a, 0x9c, 0x1a, 0xb9, 0x89,
	0xf2, 0x87, 0x20, 0x85, 0xd3, 0x33, 0x37, 0x74, 0x09, 0x96, 0xf4, 0xce, 0x02, 0x64, 0x85, 0x12,
	0xd9, 0x40, 0xf3, 0x6d, 0xe7, 0x39, 0x7c, 0xcd, 0xdc, 0xd4, 0x89, 0x07, 0x83, 0x88, 0xbe, 0x63,
	0x6e, 0xcd, 0xe8, 0x3b, 0x11, 0x7d, 0x62, 0x5e, 0x99, 0xd1, 0x27, 0xa5, 0x66, 0x50, 0x3e, 0xf5,
	0xfa, 0x2f, 0x79, 0x96, 0x99, 0x56, 0x83, 0xdc, 0x44, 0x0b, 0xed, 0xf1, 0x53, 0x5d, 0xe3, 0x45,
	0x7d, 0x66, 0x89, 0x07, 0x1e, 0x29, 0xa5, 0xaf, 0xa3, 0x42, 0x5d, 0x4c, 0x3d, 0xc9, 0xdf, 0x86,
	0x29, 0xa9, 0xa1, 0xa5, 0x70, 0xe0, 0xc8, 0x30, 0xe8, 0x6a, 0x0d, 0xeb, 0x59, 0x09, 0x6e, 0x25,
	0x9d, 0xc8, 0x35, 0xb4, 0xf8, 0x36, 0x4c, 0xf7, 0xa7, 0x12, 0x7c, 0x5d, 0xdf, 0x65, 0x2b, 0x1e,
	0x97, 0xde, 0x45, 0xd9, 0xa6, 0x10, 0x64, 0x07, 0xe5, 0xea, 0xdc, 0x86, 0x30, 0xde, 0xb2, 0x8e,
	0xd7, 0x14, 0x42, 0x31, 0x4b, 0x2b, 0xe4, 0x26, 0x9a, 0x3f, 0x80, 0x33, 0x70, 0x53, 0x6d, 0xfe,
	0x80, 0x0f, 0x34, 0xb4, 0x02, 0x4d, 0x95, 0xfa, 0xd0, 0x1f, 0xe8, 0x45, 0x0a, 0x96, 0x32, 0x2b,
	0x1f, 0x1a, 0x68, 0xbe, 0xce, 0x99, 0x2f, 0xc9, 0x2a, 0x42, 0xda, 0xe8, 0x36, 0xa0, 0xef, 0xe3,
	0x39, 0x72, 0x1d, 0x99, 0xf1, 0x98, 0x8e, 0x5d, 0xd9, 0x06, 0xa1, 0x5a, 0xd0, 0x09, 0x17, 0x12,
	0x7f, 0xb6, 0x4b, 0xae, 0xa0, 0x37, 0x02, 0xb9, 0x33, 0x79, 0x04, 0xd4, 0x06, 0xd1, 0x55, 0x45,
	0xc5, 0x98, 0x5c, 0x43, 0x5b, 0x17, 0x84, 0xc7, 0x20, 0x7c, 0x87, 0x33, 0x7c, 0x9f, 0x6c, 0xa3,
	0xcd, 0x0b, 0xda, 0x21, 0x15, 0xcf, 0x40, 0xe0, 0xd7, 0x7f, 0xff, 0x76, 0x96, 0x6c, 0x22, 0x1c,
	0xa8, 0x2d, 0x76, 0xc6, 0x7b, 0x54, 0xaa, 0x39, 0x9f, 0x5e, 0xaf, 0x74, 0xd0, 0x62, 0x67, 0xa2,
	0xbe, 0x46, 0xb6, 0xba, 0x51, 0xcb, 0x91, 0xdd, 0x3d, 0x72, 0x5c, 0x3c, 0xa7, 0x96, 0x8b, 0xc9,
	0xa9, 0xe7, 0x83, 0x90, 0x4d, 0x17, 0x46, 0xc0, 0x24, 0xce, 0xa4, 0xb4, 0x06, 0xb8, 0x20, 0x21,
	0xd2, 0x72, 0x95, 0x17, 0x19, 0xb4, 0xd0, 0x99, 0x3c, 0x70, 0xc0, 0xb5, 0xc9, 0x1a, 0x5a, 0x0a,
	0xcd, 0x30, 0xe8, 0x06, 0xc2, 0x11, 0xa8, 0x83, 0xeb, 0xaa, 0xf7, 0x81, 0x8d, 0x4b, 0x68, 0x15,
	0x67, 0x2e, 0xa1, 0x35, 0x9c, 0x4d, 0x52, 0xf5, 0xb2, 0x75, 0x84, 0xdc, 0x25, 0xb4, 0x8a, 0xe7,
	0x2f, 0xa1, 0x35, 0x9c, 0x4f, 0xd2, 0x96, 0x84, 0x91, 0x8e, 0xb0, 0x70, 0x09, 0xad, 0xe2, 0xc5,
	0x4b, 0x68, 0x0d, 0x17, 0x92, 0xb4, 0x69, 0x3b, 0xfa, 0xdb, 0x8a, 0xd1, 0x25, 0xb4, 0x8a, 0x97,
	0x2e, 0xa1, 0x35, 0xbc, 0x4c, 0x36, 0xd1, 0x7a, 0x5c, 0x98, 0xf1, 0x48, 0x1b, 0x3e, 0x5e, 0x49,
	0xe2, 0x43, 0x3a, 0x09, 0xb1, 0x59, 0x39, 0x40, 0x8b, 0x6d, 0x70, 0xa1, 0x27, 0x8f, 0x3d, 0x15,
	0x2f, 0xb2, 0xbb, 0x47, 0x30, 0x96, 0x82, 0x86, 0x75, 0x8d, 0x69, 0x8b, 0xf5, 0xdc, 0xb1, 0x0d,
	0x41, 0x5d, 0x63, 0xda, 0x9c, 0x04, 0x34, 0x53, 0x39, 0x43, 0x8b, 0xd1, 0xaf, 0x14, 0x75, 0xd9,
	0x22, 0xbb, 0x7b, 0xc4, 0x65, 0x5b, 0x52, 0x21, 0xc1, 0x0e, 0x02, 0xc6, 0x82, 0x6a, 0x89, 0x0e,
	0x1b, 0x60, 0x83, 0xac, 0xa3, 0x95, 0x98, 0xee, 0x8f, 0xfd, 0x29, 0xce, 0x90, 0x37, 0xd0, 0x5a,
	0xca, 0x11, 0x6c, 0x9c, 0x4d, 0xc1, 0xba, 0xcb, 0x7d, 0xb0, 0xf1, 0x42, 0xc5, 0x4a, 0xb4, 0x60,
	0x42, 0xd0, 0x6a, 0x3c, 0xe8, 0x1e, 0x71, 0x06, 0x78, 0x8e, 0x5c, 0x45, 0x9b, 0x33, 0xa6, 0xa7,
	0x1d, 0x33, 0x65, 0x63, 0x83, 0x6c, 0x21, 0x32, 0x93, 0x0e, 0xa9, 0xc3, 0x24, 0x75, 0x18, 0xce,
	0x54, 0xde, 0x45, 0xf9, 0x26, 0xa3, 0x4f, 0x5d, 0x50, 0x09, 0x07, 0x56, 0xf7, 0x80, 0xaa, 0x3e,
	0x79, 0xdc, 0xef, 0xe3, 0x39, 0x95, 0x48, 0x9a, 0x32, 0x6c, 0x24, 0xe0, 0x5e, 0x4f, 0x3a, 0x67,
	0x70, 0xcc, 0x82, 0xdb, 0x96, 0x86, 0xfd, 0x3e, 0xce, 0x56, 0x3e, 0x30, 0x50, 0xe1, 0x54, 0xb8,
	0xed, 0xde, 0x10, 0x46, 0xa0, 0xb6, 0x1f, 0x0f, 0x66, 0xaf, 0x64, 0x86, 0x4e, 0x99, 0x80, 0x1e,
	0x1f, 0x30, 0xe7, 0x39, 0xd8, 0xd8, 0x50, 0x7b, 0x9c, 0x69, 0x8f, 0xa4, 0xf4, 0x70, 0x26, 0xcd,
	0x1a, 0x54, 0x52, 0x9c, 0x4d, 0xb3, 0x07, 0x8e, 0x0b, 0x38, 0x97, 0x5e, 0x6a, 0x6f, 0xe4, 0xe1,
	0x85, 0x34, 0x7a, 0xe8, 0x48, 0x8c, 0x2b, 0x7f, 0x36, 0xa2, 0x86, 0xae, 0xba, 0x4c, 0x60, 0x85,
	0x89, 0x6d, 0xa2, 0xf5, 0x70, 0x7c, 0x2c, 0xe4, 0x90, 0x9f, 0x38, 0x13, 0x70, 0xb1, 0x71, 0x11,
	0x1f, 0x82, 0x04, 0x11, 0x3c, 0xe8, 0x14, 0x76, 0x5c, 0xd7, 0x19, 0x69, 0x2d, 0xfb, 0x85, 0x48,
	0x2e, 0x65, 0xcf, 0x70, 0x8e, 0x6c, 0x23, 0x33, 0xc4, 0x8f, 0x60, 0xf2, 0x50, 0x38, 0x76, 0x62,
	0xd2, 0x3c, 0xd9, 0x45, 0xb7, 0x42, 0xb5, 0x23, 0xa8, 0x07, 0xcf, 0x79, 0x83, 0xdb, 0xd0, 0xa3,
	0x43, 0xb0, 0x05, 0x67, 0x09, 0xcf, 0x7c, 0xe5, 0xa7, 0x46, 0xaa, 0xb3, 0xab, 0x6d, 0xc6, 0xc3,
	0x70, 0x2f, 0xdb, 0xc8, 0x9c, 0xa1, 0x36, 0xf4, 0x04, 0xc8, 0x7d, 0x3e, 0xe9, 0x1e, 0xd1, 0xba,
	0x8b, 0x6d, 0xdd, 0x17, 0x63, 0x75, 0xcf, 0x9f, 0x8e, 0x0e, 0xfd, 0x41, 0xa0, 0x41, 0x5a, 0x6b,
	0x3b, 0x03, 0xe6, 0xb0, 0x50, 0xeb, 0x93, 0x22, 0xba, 0xfa, 0x45, 0xad, 0xd9, 0xa8, 0xbd, 0xf5,
	0x56, 0xf5, 0x2b, 0xf8, 0x6f, 0x46, 0xe5, 0x3f, 0x79, 0xb4, 0x10, 0x7e, 0x0a, 0x54, 0x52, 0xa1,
	0xd9, 0x3d, 0xe2, 0x4d, 0x21, 0xf0, 0x1c, 0xb9, 0x82, 0x48, 0x84, 0x4e, 0x19, 0xa3, 0x23, 0xb0,
	0x15, 0xff, 0x4e, 0x99, 0x98, 0xe8, 0x8d, 0x48, 0x68, 0x31, 0x09, 0x82, 0x51, 0x57, 0x29, 0xdf,
	0x2d, 0x93, 0x6b, 0x68, 0x73, 0x36, 0xc5, 0x1f, 0x7b, 0x1e, 0x57, 0xaf, 0xed, 0xd8, 0xc3, 0xef,
	0x5d, 0xd0, 0x9c, 0x91, 0x17, 0xf4, 0x53, 0xb0, 0xf1, 0xf7, 0xca, 0x64, 0x03, 0xad, 0x45, 0x5a,
	0xc7, 0x19, 0x01, 0x1f, 0x4b, 0xfc, 0xfd, 0x32, 0xb9, 0x8a, 0x36, 0x22, 0xda, 0x1e, 0x8e, 0xa5,
	0x74, 0xd8, 0xa0, 0xc1, 0xbf, 0xc9, 0xf0, 0x0f, 0x52, 0xd2, 0x11, 0x97, 0x75, 0xce, 0x18, 0xf4,
	0x54, 0xac, 0x1f, 0x96, 0x93, 0x69, 0xef, 0x8d, 0xe5, 0xf0, 0x01, 0x75, 0x5c, 0xb0, 0xf1, 0x8f,
	0x52, 0x69, 0xeb, 0xdf, 0x8f, 0xa1, 0xf2, 0x7e, 0x99, 0xfc, 0x1f, 0xda, 0x8a, 0x17, 0x02, 0x5f,
	0x7d, 0x71, 0xf4, 0x6f, 0x3b, 0xb0, 0xf1, 0x8f, 0xcb, 0xea, 0xdb, 0x92, 0x58, 0xca, 0x02, 0x6a,
	0x4f, 0xf1, 0x4f, 0xca, 0x64, 0x1b, 0x5d, 0x89, 0x70, 0xf8, 0x83, 0xee, 0x88, 0xcb, 0x07, 0x7c,
	0xcc, 0x6c, 0xfc, 0x41, 0x6a, 0xb3, 0xa1, 0x1a, 0x76, 0x89, 0x9f, 0xa5, 0x12, 0xdc, 0xa7, 0x76,
	0x28, 0xe3, 0x9f, 0xa7, 0x84, 0x16, 0x3b, 0xa3, 0xae, 0x63, 0x9f, 0x5a, 0x2d, 0xfc, 0x8b, 0x54,
	0x0a, 0xfb, 0xd4, 0x7e, 0x4c, 0xdd, 0x31, 0xe0, 0x0f, 0x2f, 0xf3, 0xef, 0xd0, 0x01, 0xfe, 0x65,
	0xaa, 0x3a, 0xea, 0xb3, 0x10, 0x27, 0xf6, 0xab, 0x54, 0xda, 0x47, 0x5c, 0x0e, 0x1d, 0x36, 0xe8,
	0xf0, 0x3a, 0x1f, 0x8d, 0x1c, 0x89, 0x3f, 0x4a, 0x4d, 0x0c, 0x60, 0x58, 0xa3, 0x5f, 0xa7, 0x76,
	0xd4, 0xf6, 0x68, 0x0f, 0xe2, 0xa0, 0x1f, 0xa7, 0xeb, 0x27, 0xb9, 0xa0, 0x03, 0x50, 0xf3, 0xc6,
	0x02, 0xf0, 0x6f, 0x52, 0x65, 0xdf, 0xf3, 0xbc, 0x78, 0xda, 0x27, 0x29, 0xe5, 0x90, 0xba, 0x7d,
	0x2e, 0x46, 0x60, 0x77, 0x26, 0xf8, 0xb7, 0x65, 0xb2, 0x85, 0xd6, 0x13, 0x1b, 0xd6, 0x1d, 0x81,
	0xe2, 0x3f, 0xa4, 0x66, 0xa8, 0xd6, 0x12, 0xad, 0xf2, 0x69, 0x6a, 0x46, 0x73, 0xa2, 0xae, 0x9d,
	0xba, 0x91, 0x7f, 0x4c, 0xf1, 0x93, 0xf8, 0xc8, 0xff, 0x94, 0xde, 0x29, 0xb8, 0x6e, 0x9c, 0xd6,
	0x5f, 0x52, 0x8b, 0x9c, 0x08, 0x7e, 0xe6, 0xd8, 0x20, 0x54, 0xb0, 0xbf, 0x96, 0xc9, 0x0d, 0x74,
	0x2d, 0x52, 0x1e, 0x3b, 0xdc, 0xa5, 0x12, 0xfc, 0x3d, 0xcf, 0x03, 0x66, 0x1f, 0x33, 0x77, 0x8a,
	0xff, 0x55, 0x26, 0xb7, 0xd0, 0x8d, 0xd9, 0x89, 0xf8, 0xe3, 0x7e, 0xdf, 0xe9, 0x39, 0xc0, 0xe4,
	0x09, 0x88, 0x91, 0xa3, 0xef, 0x95, 0x8f, 0xff, 0x5d, 0xae, 0x34, 0xd0, 0x62, 0xf4, 0xf3, 0x4a,
	0xb5, 0xc6, 0xc8, 0xee, 0x36, 0x85, 0xe0, 0xea, 0xe1, 0xad, 0xeb, 0x3f, 0x8b, 0x02, 0xf6, 0x55,
	0x2a, 0x54, 0xf3, 0x4e, 0xa2, 0x16, 0xeb, 0x73, 0x9c, 0xdb, 0x1f, 0xbe, 0x78, 0x59, 0x9c, 0xfb,
	0xfc, 0x65, 0x71, 0xee, 0xf5, 0xcb, 0xa2, 0xf1, 0xad, 0xf3, 0xa2, 0xf1, 0xf1, 0x79, 0xd1, 0xf8,
	0xec, 0xbc, 0x68, 0xbc, 0x38, 0x2f, 0x1a, 0xff, 0x38, 0x2f, 0x1a, 0xff, 0x3c, 0x2f, 0xce, 0xbd,
	0x3e, 0x2f, 0x1a, 0xef, 0xbf, 0x2a, 0xce, 0xbd, 0x78, 0x55, 0x9c, 0xfb, 0xfc, 0x55, 0x71, 0xee,
	0xc9, 0x9b, 0x03, 0x47, 0x0e, 0xc7, 0x4f, 0xef, 0xf4, 0xf8, 0xe8, 0x2e, 0x15, 0xf2, 0xf6, 0x08,
	0x6c, 0x87, 0xde, 0xf6, 0x5c, 0x2a, 0x55, 0xfd, 0xef, 0xd2, 0x91, 0x77, 0xdb, 0xb7, 0x9f, 0xdd,
	0x1e, 0x70, 0x65, 0x7e, 0x92, 0xc9, 0xee, 0x1d, 0x9e, 0x3c, 0xcd, 0xeb, 0xff, 0x11, 0xdc, 0xff,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x89, 0xe1, 0x91, 0x34, 0x10, 0x00, 0x00,
}

func (x Const) String() string {
	s, ok := Const_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxOpCode) String() string {
	s, ok := TxOpCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxField) String() string {
	s, ok := TxField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SelectOp) String() string {
	s, ok := SelectOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OpStatus) String() string {
	s, ok := OpStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StateSync) String() string {
	s, ok := StateSync_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Enable) String() string {
	s, ok := Enable_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UrlScheme) String() string {
	s, ok := UrlScheme_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Metric) String() string {
	s, ok := Metric_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CryptoKitID) String() string {
	s, ok := CryptoKitID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ErrCode) String() string {
	s, ok := ErrCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *TxEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tags != nil {
		{
			size, err := m.Tags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ContextID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_2))
		i--
		dAtA[i] = 0x61
	}
	if m.ContextID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_1))
		i--
		dAtA[i] = 0x59
	}
	if m.ContextID_0 != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.ContextID_0))
		i--
		dAtA[i] = 0x50
	}
	if m.GenesisID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GenesisID_2))
		i--
		dAtA[i] = 0x39
	}
	if m.GenesisID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GenesisID_1))
		i--
		dAtA[i] = 0x31
	}
	if m.GenesisID_0 != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.GenesisID_0))
		i--
		dAtA[i] = 0x28
	}
	if m.OpCount != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.OpCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashResponse) > 0 {
		i -= len(m.HashResponse)
		copy(dAtA[i:], m.HashResponse)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.HashResponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Expiry != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tags != nil {
		{
			size, err := m.Tags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StateSync != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.StateSync))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PinAttrs) > 0 {
		for iNdEx := len(m.PinAttrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PinAttrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PinTarget != nil {
		{
			size, err := m.PinTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *LaunchURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LaunchURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LaunchURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SizeZ != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.SizeZ))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.SizeY != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.SizeY))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SizeX != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.SizeX))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Metric != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.Metric))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x52
	}
	if m.ID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ID_2))
		i--
		dAtA[i] = 0x21
	}
	if m.ID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ID_1))
		i--
		dAtA[i] = 0x19
	}
	if m.ID_0 != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.ID_0))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Tags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTags) > 0 {
		for iNdEx := len(m.SubTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CryptoKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CryptoKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyBytes) > 0 {
		i -= len(m.KeyBytes)
		copy(dAtA[i:], m.KeyBytes)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.KeyBytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.CryptoKitID != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.CryptoKitID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Err) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Err) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Err) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (this *TxEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxEnvelope)
	if !ok {
		that2, ok := that.(TxEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.OpCount != that1.OpCount {
		return false
	}
	if this.GenesisID_0 != that1.GenesisID_0 {
		return false
	}
	if this.GenesisID_1 != that1.GenesisID_1 {
		return false
	}
	if this.GenesisID_2 != that1.GenesisID_2 {
		return false
	}
	if this.ContextID_0 != that1.ContextID_0 {
		return false
	}
	if this.ContextID_1 != that1.ContextID_1 {
		return false
	}
	if this.ContextID_2 != that1.ContextID_2 {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	if !this.Epoch.Equal(that1.Epoch) {
		return false
	}
	if !this.Tags.Equal(that1.Tags) {
		return false
	}
	return true
}
func (this *Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Login)
	if !ok {
		that2, ok := that.(Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if this.HostAddress != that1.HostAddress {
		return false
	}
	if this.Tags != that1.Tags {
		return false
	}
	if !this.Checkpoint.Equal(that1.Checkpoint) {
		return false
	}
	return true
}
func (this *LoginChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginChallenge)
	if !ok {
		that2, ok := that.(LoginChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HashResponse, that1.HashResponse) {
		return false
	}
	return true
}
func (this *LoginCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginCheckpoint)
	if !ok {
		that2, ok := that.(LoginCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	return true
}
func (this *PinRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PinRequest)
	if !ok {
		that2, ok := that.(PinRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PinTarget.Equal(that1.PinTarget) {
		return false
	}
	if len(this.PinAttrs) != len(that1.PinAttrs) {
		return false
	}
	for i := range this.PinAttrs {
		if !this.PinAttrs[i].Equal(that1.PinAttrs[i]) {
			return false
		}
	}
	if this.StateSync != that1.StateSync {
		return false
	}
	if !this.Tags.Equal(that1.Tags) {
		return false
	}
	return true
}
func (this *LaunchURL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LaunchURL)
	if !ok {
		that2, ok := that.(LaunchURL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID_0 != that1.ID_0 {
		return false
	}
	if this.ID_1 != that1.ID_1 {
		return false
	}
	if this.ID_2 != that1.ID_2 {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.Metric != that1.Metric {
		return false
	}
	if this.SizeX != that1.SizeX {
		return false
	}
	if this.SizeY != that1.SizeY {
		return false
	}
	if this.SizeZ != that1.SizeZ {
		return false
	}
	return true
}
func (this *Tags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tags)
	if !ok {
		that2, ok := that.(Tags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if len(this.SubTags) != len(that1.SubTags) {
		return false
	}
	for i := range this.SubTags {
		if !this.SubTags[i].Equal(that1.SubTags[i]) {
			return false
		}
	}
	return true
}
func (this *CryptoKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CryptoKey)
	if !ok {
		that2, ok := that.(CryptoKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CryptoKitID != that1.CryptoKitID {
		return false
	}
	if !bytes.Equal(this.KeyBytes, that1.KeyBytes) {
		return false
	}
	return true
}
func (this *Err) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Err)
	if !ok {
		that2, ok := that.(Err)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *TxEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&amp.TxEnvelope{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "OpCount: "+fmt.Sprintf("%#v", this.OpCount)+",\n")
	s = append(s, "GenesisID_0: "+fmt.Sprintf("%#v", this.GenesisID_0)+",\n")
	s = append(s, "GenesisID_1: "+fmt.Sprintf("%#v", this.GenesisID_1)+",\n")
	s = append(s, "GenesisID_2: "+fmt.Sprintf("%#v", this.GenesisID_2)+",\n")
	s = append(s, "ContextID_0: "+fmt.Sprintf("%#v", this.ContextID_0)+",\n")
	s = append(s, "ContextID_1: "+fmt.Sprintf("%#v", this.ContextID_1)+",\n")
	s = append(s, "ContextID_2: "+fmt.Sprintf("%#v", this.ContextID_2)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	if this.Epoch != nil {
		s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	}
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&amp.Login{")
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "HostAddress: "+fmt.Sprintf("%#v", this.HostAddress)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	if this.Checkpoint != nil {
		s = append(s, "Checkpoint: "+fmt.Sprintf("%#v", this.Checkpoint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginChallenge{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginResponse{")
	s = append(s, "HashResponse: "+fmt.Sprintf("%#v", this.HashResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginCheckpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&amp.LoginCheckpoint{")
	s = append(s, "TokenType: "+fmt.Sprintf("%#v", this.TokenType)+",\n")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "URI: "+fmt.Sprintf("%#v", this.URI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PinRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&amp.PinRequest{")
	if this.PinTarget != nil {
		s = append(s, "PinTarget: "+fmt.Sprintf("%#v", this.PinTarget)+",\n")
	}
	if this.PinAttrs != nil {
		s = append(s, "PinAttrs: "+fmt.Sprintf("%#v", this.PinAttrs)+",\n")
	}
	s = append(s, "StateSync: "+fmt.Sprintf("%#v", this.StateSync)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LaunchURL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LaunchURL{")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&amp.Tag{")
	s = append(s, "ID_0: "+fmt.Sprintf("%#v", this.ID_0)+",\n")
	s = append(s, "ID_1: "+fmt.Sprintf("%#v", this.ID_1)+",\n")
	s = append(s, "ID_2: "+fmt.Sprintf("%#v", this.ID_2)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "UID: "+fmt.Sprintf("%#v", this.UID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	s = append(s, "SizeX: "+fmt.Sprintf("%#v", this.SizeX)+",\n")
	s = append(s, "SizeY: "+fmt.Sprintf("%#v", this.SizeY)+",\n")
	s = append(s, "SizeZ: "+fmt.Sprintf("%#v", this.SizeZ)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&amp.Tags{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.SubTags != nil {
		s = append(s, "SubTags: "+fmt.Sprintf("%#v", this.SubTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CryptoKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&amp.CryptoKey{")
	s = append(s, "CryptoKitID: "+fmt.Sprintf("%#v", this.CryptoKitID)+",\n")
	s = append(s, "KeyBytes: "+fmt.Sprintf("%#v", this.KeyBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Err) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&amp.Err{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TxEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAmp(uint64(m.Status))
	}
	if m.OpCount != 0 {
		n += 1 + sovAmp(uint64(m.OpCount))
	}
	if m.GenesisID_0 != 0 {
		n += 1 + sovAmp(uint64(m.GenesisID_0))
	}
	if m.GenesisID_1 != 0 {
		n += 9
	}
	if m.GenesisID_2 != 0 {
		n += 9
	}
	if m.ContextID_0 != 0 {
		n += 1 + sovAmp(uint64(m.ContextID_0))
	}
	if m.ContextID_1 != 0 {
		n += 9
	}
	if m.ContextID_2 != 0 {
		n += 9
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 2 + l + sovAmp(uint64(l))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 2 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *LoginChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashResponse)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *LoginCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovAmp(uint64(m.Expiry))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *PinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PinTarget != nil {
		l = m.PinTarget.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	if len(m.PinAttrs) > 0 {
		for _, e := range m.PinAttrs {
			l = e.Size()
			n += 1 + l + sovAmp(uint64(l))
		}
	}
	if m.StateSync != 0 {
		n += 1 + sovAmp(uint64(m.StateSync))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 2 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *LaunchURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID_0 != 0 {
		n += 1 + sovAmp(uint64(m.ID_0))
	}
	if m.ID_1 != 0 {
		n += 9
	}
	if m.ID_2 != 0 {
		n += 9
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.Metric != 0 {
		n += 2 + sovAmp(uint64(m.Metric))
	}
	if m.SizeX != 0 {
		n += 2 + sovAmp(uint64(m.SizeX))
	}
	if m.SizeY != 0 {
		n += 2 + sovAmp(uint64(m.SizeY))
	}
	if m.SizeZ != 0 {
		n += 2 + sovAmp(uint64(m.SizeZ))
	}
	return n
}

func (m *Tags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovAmp(uint64(l))
	}
	if len(m.SubTags) > 0 {
		for _, e := range m.SubTags {
			l = e.Size()
			n += 1 + l + sovAmp(uint64(l))
		}
	}
	return n
}

func (m *CryptoKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CryptoKitID != 0 {
		n += 1 + sovAmp(uint64(m.CryptoKitID))
	}
	l = len(m.KeyBytes)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func (m *Err) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAmp(uint64(m.Code))
	}
	if m.Level != 0 {
		n += 1 + sovAmp(uint64(m.Level))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	return n
}

func sovAmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmp(x uint64) (n int) {
	return sovAmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TxEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxEnvelope{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`OpCount:` + fmt.Sprintf("%v", this.OpCount) + `,`,
		`GenesisID_0:` + fmt.Sprintf("%v", this.GenesisID_0) + `,`,
		`GenesisID_1:` + fmt.Sprintf("%v", this.GenesisID_1) + `,`,
		`GenesisID_2:` + fmt.Sprintf("%v", this.GenesisID_2) + `,`,
		`ContextID_0:` + fmt.Sprintf("%v", this.ContextID_0) + `,`,
		`ContextID_1:` + fmt.Sprintf("%v", this.ContextID_1) + `,`,
		`ContextID_2:` + fmt.Sprintf("%v", this.ContextID_2) + `,`,
		`From:` + strings.Replace(this.From.String(), "Tag", "Tag", 1) + `,`,
		`To:` + strings.Replace(this.To.String(), "Tag", "Tag", 1) + `,`,
		`Epoch:` + strings.Replace(this.Epoch.String(), "Tag", "Tag", 1) + `,`,
		`Tags:` + strings.Replace(this.Tags.String(), "Tags", "Tags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Login{`,
		`UserID:` + strings.Replace(this.UserID.String(), "Tag", "Tag", 1) + `,`,
		`DeviceID:` + strings.Replace(this.DeviceID.String(), "Tag", "Tag", 1) + `,`,
		`HostAddress:` + fmt.Sprintf("%v", this.HostAddress) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Checkpoint:` + strings.Replace(this.Checkpoint.String(), "LoginCheckpoint", "LoginCheckpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginChallenge{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`HashResponse:` + fmt.Sprintf("%v", this.HashResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginCheckpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginCheckpoint{`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`Expiry:` + fmt.Sprintf("%v", this.Expiry) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PinRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPinAttrs := "[]*Tag{"
	for _, f := range this.PinAttrs {
		repeatedStringForPinAttrs += strings.Replace(f.String(), "Tag", "Tag", 1) + ","
	}
	repeatedStringForPinAttrs += "}"
	s := strings.Join([]string{`&PinRequest{`,
		`PinTarget:` + strings.Replace(this.PinTarget.String(), "Tag", "Tag", 1) + `,`,
		`PinAttrs:` + repeatedStringForPinAttrs + `,`,
		`StateSync:` + fmt.Sprintf("%v", this.StateSync) + `,`,
		`Tags:` + strings.Replace(this.Tags.String(), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LaunchURL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LaunchURL{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`ID_0:` + fmt.Sprintf("%v", this.ID_0) + `,`,
		`ID_1:` + fmt.Sprintf("%v", this.ID_1) + `,`,
		`ID_2:` + fmt.Sprintf("%v", this.ID_2) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`SizeX:` + fmt.Sprintf("%v", this.SizeX) + `,`,
		`SizeY:` + fmt.Sprintf("%v", this.SizeY) + `,`,
		`SizeZ:` + fmt.Sprintf("%v", this.SizeZ) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tags) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubTags := "[]*Tags{"
	for _, f := range this.SubTags {
		repeatedStringForSubTags += strings.Replace(f.String(), "Tags", "Tags", 1) + ","
	}
	repeatedStringForSubTags += "}"
	s := strings.Join([]string{`&Tags{`,
		`ID:` + strings.Replace(this.ID.String(), "Tag", "Tag", 1) + `,`,
		`SubTags:` + repeatedStringForSubTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *CryptoKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CryptoKey{`,
		`CryptoKitID:` + fmt.Sprintf("%v", this.CryptoKitID) + `,`,
		`KeyBytes:` + fmt.Sprintf("%v", this.KeyBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Err) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Err{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TxEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OpStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpCount", wireType)
			}
			m.OpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_0", wireType)
			}
			m.GenesisID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_1", wireType)
			}
			m.GenesisID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_2", wireType)
			}
			m.GenesisID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_0", wireType)
			}
			m.ContextID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_1", wireType)
			}
			m.ContextID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_2", wireType)
			}
			m.ContextID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &Tag{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &Tag{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &Tag{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &Tags{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &Tag{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &Tag{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &LoginCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashResponse = append(m.HashResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.HashResponse == nil {
				m.HashResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinTarget == nil {
				m.PinTarget = &Tag{}
			}
			if err := m.PinTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PinAttrs = append(m.PinAttrs, &Tag{})
			if err := m.PinAttrs[len(m.PinAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateSync", wireType)
			}
			m.StateSync = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateSync |= StateSync(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &Tag{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LaunchURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_0", wireType)
			}
			m.ID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_1", wireType)
			}
			m.ID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_2", wireType)
			}
			m.ID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			m.Metric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric |= Metric(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeX", wireType)
			}
			m.SizeX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeX |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeY", wireType)
			}
			m.SizeY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeY |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeZ", wireType)
			}
			m.SizeZ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeZ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &Tag{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTags = append(m.SubTags, &Tags{})
			if err := m.SubTags[len(m.SubTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoKitID", wireType)
			}
			m.CryptoKitID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoKitID |= CryptoKitID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyBytes = append(m.KeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyBytes == nil {
				m.KeyBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Err) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Err: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Err: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmp = fmt.Errorf("proto: unexpected end of group")
)
